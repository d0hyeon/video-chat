[{"D:\\space\\dev\\web-api\\src\\index.tsx":"1","D:\\space\\dev\\web-api\\src\\pages\\Broadcast\\detail.tsx":"2","D:\\space\\dev\\web-api\\src\\pages\\MediaStream\\Devices.tsx":"3","D:\\space\\dev\\web-api\\src\\pages\\Performance\\Observer.tsx":"4","D:\\space\\dev\\web-api\\src\\pages\\WebGL.tsx":"5","D:\\space\\dev\\web-api\\src\\pages\\WebRTC\\Remote\\Detail.tsx":"6","D:\\space\\dev\\web-api\\src\\components\\layout\\Navigate.tsx":"7","D:\\space\\dev\\web-api\\src\\components\\styles\\common.ts":"8","D:\\space\\dev\\web-api\\src\\lib\\webgl.ts":"9","D:\\space\\dev\\web-api\\src\\components\\AsyncToggle.tsx":"10","D:\\space\\dev\\web-api\\src\\pages\\App.tsx":"11","D:\\space\\dev\\web-api\\src\\pages\\MediaStream\\index.tsx":"12","D:\\space\\dev\\web-api\\src\\pages\\MediaStream\\Track.tsx":"13","D:\\space\\dev\\web-api\\src\\pages\\WebRTC\\Remote\\index.tsx":"14","D:\\space\\dev\\web-api\\src\\pages\\ResizeObserver.tsx":"15","D:\\space\\dev\\web-api\\src\\components\\styles\\text.ts":"16","D:\\space\\dev\\web-api\\src\\components\\Toggle.tsx":"17","D:\\space\\dev\\web-api\\src\\pages\\BackgroundTask.tsx":"18","D:\\space\\dev\\web-api\\src\\pages\\Home.tsx":"19","D:\\space\\dev\\web-api\\src\\pages\\Broadcast\\index.tsx":"20","D:\\space\\dev\\web-api\\src\\pages\\Performance\\index.tsx":"21","D:\\space\\dev\\web-api\\src\\pages\\WebRTC\\Local.tsx":"22","D:\\space\\dev\\web-api\\src\\pages\\WebRTC.tsx":"23","D:\\space\\dev\\web-api\\src\\components\\styles\\input.ts":"24","D:\\space\\dev\\web-api\\src\\components\\PerformanceTestButton.tsx":"25","D:\\space\\dev\\web-api\\src\\utils\\index.ts":"26","D:\\space\\dev\\web-api\\src\\lib\\ResizeObservable.ts":"27","D:\\space\\dev\\video-chat\\src\\index.tsx":"28","D:\\space\\dev\\video-chat\\src\\pages\\App.tsx":"29","D:\\space\\dev\\video-chat\\src\\pages\\Detail.tsx":"30","D:\\space\\dev\\video-chat\\src\\pages\\index.tsx":"31","D:\\space\\dev\\video-chat\\src\\components\\styles\\common.ts":"32","D:\\space\\dev\\video-chat\\src\\components\\styles\\text.ts":"33","D:\\space\\dev\\video-chat\\src\\components\\styles\\input.ts":"34","D:\\space\\dev\\video-chat\\src\\utils\\index.ts":"35","D:\\space\\dev\\video-chat\\src\\atoms\\user.ts":"36","D:\\space\\dev\\video-chat\\src\\components\\layout\\Header.tsx":"37","D:\\space\\dev\\video-chat\\src\\components\\common\\Tooltip.tsx":"38","D:\\space\\dev\\video-chat\\src\\components\\common\\Profile.tsx":"39","D:\\space\\dev\\video-chat\\src\\components\\popup\\UserFormPopup.tsx":"40","D:\\space\\dev\\video-chat\\src\\components\\common\\Modal.tsx":"41","D:\\space\\dev\\video-chat\\src\\components\\form\\InputField.tsx":"42","D:\\space\\dev\\video-chat\\src\\components\\form\\base\\index.tsx":"43","D:\\space\\dev\\video-chat\\src\\components\\form\\base\\context.tsx":"44","D:\\space\\dev\\video-chat\\src\\components\\form\\base\\Form.tsx":"45","D:\\space\\dev\\video-chat\\src\\components\\form\\base\\FormItem.tsx":"46","D:\\space\\dev\\video-chat\\src\\constant\\theme.ts":"47","D:\\space\\dev\\video-chat\\src\\components\\popup\\RoomFormPopup.tsx":"48","D:\\space\\dev\\video-chat\\src\\components\\common\\UserVideo.tsx":"49"},{"size":216,"mtime":1611323145932,"results":"50","hashOfConfig":"51"},{"size":2725,"mtime":1612158675880,"results":"52","hashOfConfig":"51"},{"size":3689,"mtime":1615197423126,"results":"53","hashOfConfig":"51"},{"size":4643,"mtime":1614752347025,"results":"54","hashOfConfig":"51"},{"size":2900,"mtime":1614933651450,"results":"55","hashOfConfig":"51"},{"size":9005,"mtime":1615310582478,"results":"56","hashOfConfig":"51"},{"size":1973,"mtime":1617104739968,"results":"57","hashOfConfig":"51"},{"size":1569,"mtime":1615027057853,"results":"58","hashOfConfig":"51"},{"size":829,"mtime":1614926376995,"results":"59","hashOfConfig":"51"},{"size":5578,"mtime":1615905888709,"results":"60","hashOfConfig":"51"},{"size":2328,"mtime":1615893850492,"results":"61","hashOfConfig":"51"},{"size":3043,"mtime":1612158675882,"results":"62","hashOfConfig":"51"},{"size":5423,"mtime":1614754472413,"results":"63","hashOfConfig":"51"},{"size":3343,"mtime":1615271207610,"results":"64","hashOfConfig":"51"},{"size":4210,"mtime":1615905135559,"results":"65","hashOfConfig":"51"},{"size":1032,"mtime":1614754216971,"results":"66","hashOfConfig":"51"},{"size":5952,"mtime":1615905432848,"results":"67","hashOfConfig":"51"},{"size":9400,"mtime":1614933672968,"results":"68","hashOfConfig":"51"},{"size":268,"mtime":1615892206542,"results":"69","hashOfConfig":"51"},{"size":1202,"mtime":1612158675880,"results":"70","hashOfConfig":"51"},{"size":3555,"mtime":1614680128723,"results":"71","hashOfConfig":"51"},{"size":8455,"mtime":1615310800831,"results":"72","hashOfConfig":"51"},{"size":8323,"mtime":1615093648972,"results":"73","hashOfConfig":"51"},{"size":393,"mtime":1612158675877,"results":"74","hashOfConfig":"51"},{"size":2360,"mtime":1612158675875,"results":"75","hashOfConfig":"51"},{"size":965,"mtime":1615900331720,"results":"76","hashOfConfig":"51"},{"size":2322,"mtime":1612158675878,"results":"77","hashOfConfig":"51"},{"size":216,"mtime":1611323145932,"results":"78","hashOfConfig":"79"},{"size":2082,"mtime":1618577139860,"results":"80","hashOfConfig":"79"},{"size":9055,"mtime":1618900094322,"results":"81","hashOfConfig":"79"},{"size":4146,"mtime":1618808606512,"results":"82","hashOfConfig":"79"},{"size":2935,"mtime":1618812579946,"results":"83","hashOfConfig":"79"},{"size":1032,"mtime":1618571917649,"results":"84","hashOfConfig":"79"},{"size":393,"mtime":1612158675877,"results":"85","hashOfConfig":"79"},{"size":1182,"mtime":1618896548173,"results":"86","hashOfConfig":"79"},{"size":656,"mtime":1618494244478,"results":"87","hashOfConfig":"79"},{"size":1698,"mtime":1618566017956,"results":"88","hashOfConfig":"79"},{"size":927,"mtime":1618498620848,"results":"89","hashOfConfig":"79"},{"size":915,"mtime":1618502959995,"results":"90","hashOfConfig":"79"},{"size":2506,"mtime":1618573731689,"results":"91","hashOfConfig":"79"},{"size":3594,"mtime":1618574304675,"results":"92","hashOfConfig":"79"},{"size":3976,"mtime":1618570826919,"results":"93","hashOfConfig":"79"},{"size":459,"mtime":1618566648400,"results":"94","hashOfConfig":"79"},{"size":338,"mtime":1618565876074,"results":"95","hashOfConfig":"79"},{"size":974,"mtime":1618576706981,"results":"96","hashOfConfig":"79"},{"size":2189,"mtime":1618571203912,"results":"97","hashOfConfig":"79"},{"size":46,"mtime":1618569462689,"results":"98","hashOfConfig":"79"},{"size":2117,"mtime":1618800583038,"results":"99","hashOfConfig":"79"},{"size":1888,"mtime":1618897909807,"results":"100","hashOfConfig":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"1jg6xea",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"103"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"103"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"103"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"103"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"103"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"103"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"103"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},"ws85rx",{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"165"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"165"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"165"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"165"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"165"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"165"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"165"},"D:\\space\\dev\\web-api\\src\\index.tsx",[],["216","217"],"D:\\space\\dev\\web-api\\src\\pages\\Broadcast\\detail.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\MediaStream\\Devices.tsx",["218","219"],"import React from 'react';\r\nimport { Button, Header, Section, Ul } from '@src/components/styles/common';\r\nimport { Code, H1, H2, P } from '@src/components/styles/text';\r\nimport Toggle from '@src/components/Toggle';\r\n\r\ninterface EnumerateDevices {\r\n  deviceId: string;\r\n  groupId: string;\r\n  kind: string;\r\n  label: string;\r\n}\r\n\r\nconst MediaDevices: React.FC = () => {\r\n  const [enumerateDevices, setEnumerateDevices] = React.useState<EnumerateDevices[]>([]);\r\n  const videoRef = React.useRef<HTMLVideoElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    navigator.mediaDevices.enumerateDevices()\r\n      .then(devices => {\r\n        setEnumerateDevices(devices);\r\n      })\r\n  }, []);\r\n\r\n  const constraints: MediaStreamConstraints = {\r\n    audio: true,\r\n    video: true\r\n    // video: {\r\n    //   width: { max: 1920, ideal: 1600},\r\n    // }\r\n  }\r\n\r\n  const runUserMedia = React.useCallback(() => {\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(mediaStream => {\r\n        if(videoRef.current) {\r\n          videoRef.current.srcObject = mediaStream;\r\n        }\r\n      })\r\n  }, [videoRef, constraints]);\r\n\r\n  const runDisplayMedia = React.useCallback(() => {\r\n    // @ts-ignore\r\n    navigator.mediaDevices.getDisplayMedia(constraints)\r\n    .then((mediaStream: MediaStream) => {\r\n      if(videoRef.current) {\r\n        videoRef.current.srcObject = mediaStream;\r\n      }\r\n    })\r\n  }, [videoRef]);\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <H1>MediaDevices</H1>\r\n        <P>MediaDevices 는 화면 또는 기기에 연결 된 미디어 입력 장치에 대한 엑세스를 제공한다. 본질적으로는 미디어 데이터의 모든 하드웨어 소스에 엑세스 할 수 있다.</P>\r\n        <P>MediaDevices의 API는 아래와 같이 제공된다.</P>\r\n      </Header>\r\n      <Section>\r\n        <H2>event</H2>\r\n        <Ul>\r\n          <li>devicechange</li>\r\n        </Ul>\r\n      </Section>\r\n      <Section>\r\n        <H1>method</H1>\r\n        <Ul>\r\n          <li>enumerateDevices : 미디어 입력 및 출력 장치 목록을 반환한다. 반환 값은 <Code>{'Promise<MediaDeviceInfo>'}</Code> 이다.</li>\r\n          <li>getSupportedConstraints : 사용자 기기의 <Code>MediaTrackSupportedConstraints</Code>를 반환한다.</li>\r\n          <li>getDisplayMedia : 사용자 화면의 스트림 데이터를 반환한다. 반환 값은 <Code>{'Promise<MediaStream>'}</Code>이다</li>\r\n          <li>getUserMedia : 사용자 기기와 연결 된 미디어 입력 장치의 스트림 데이터를 반환한다. 반환 값은 <Code>{'Promise<MediaStream>'}</Code>이다</li>\r\n        </Ul>\r\n      </Section>\r\n      <Section>\r\n        <Toggle title={<P>enumerate devices</P>}>\r\n          <Ul>\r\n            {enumerateDevices.map(({groupId, kind, label}) => (\r\n              <li key={groupId}>\r\n                kind : {kind} / label : {label}\r\n              </li>\r\n            ))}\r\n          </Ul>\r\n        </Toggle>\r\n        <Toggle title={<P>supported constraints</P>}>\r\n          <Ul>\r\n            {Object.entries(navigator.mediaDevices.getSupportedConstraints()).map(([key, value]) => (\r\n              <li key={`${key}-${value}`}>\r\n                {key} : {value.toString()}\r\n              </li>\r\n            ))}\r\n          </Ul>\r\n        </Toggle>\r\n        <Section>\r\n          <P>\r\n            <Button onClick={runUserMedia}>getUserMedia</Button>\r\n          </P>\r\n          <P>\r\n            <Button onClick={runDisplayMedia}>getDisplayMedia</Button>\r\n          </P>\r\n        </Section>\r\n        <Section>\r\n          <video ref={videoRef} autoPlay style={{maxWidth: '1000px'}} />\r\n        </Section>\r\n      </Section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MediaDevices;","D:\\space\\dev\\web-api\\src\\pages\\Performance\\Observer.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\WebGL.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\WebRTC\\Remote\\Detail.tsx",[],"D:\\space\\dev\\web-api\\src\\components\\layout\\Navigate.tsx",[],"D:\\space\\dev\\web-api\\src\\components\\styles\\common.ts",[],"D:\\space\\dev\\web-api\\src\\lib\\webgl.ts",[],"D:\\space\\dev\\web-api\\src\\components\\AsyncToggle.tsx",["220","221","222","223"],"import React from 'react';\r\nimport ResizeObservable from '@src/lib/ResizeObservable';\r\nimport {ToggleProps, Wrapper, Title, Content} from './Toggle';\r\nimport { isExistWithInTimeout } from '@src/utils';\r\n\r\nconst ob = new ResizeObservable();\r\n\r\ntype NodeHTML = React.ReactNode | string;\r\ntype GetHTMLOfPromise = (open: boolean) => Promise<NodeHTML>;\r\ntype GetChildrenOfFunc = (open: boolean) => React.ReactNode;\r\n\r\ninterface Props extends ToggleProps  {\r\n  children: GetChildrenOfFunc | GetHTMLOfPromise;\r\n}\r\n\r\nconst AsyncToggle: React.FC<Props> = ({title, children, loading, duration = 300, timeout = 3000}) => {\r\n  const contentRef = React.useRef<HTMLDivElement>(null);\r\n  const lastHeightRef = React.useRef<number>(0);\r\n  const [heightValue, setHeightValue] = React.useState<string>('0px');\r\n  const [isInit, setIsInit] = React.useState<boolean>(false); // false 일 경우 visibility 속성을 통해 실제 사이즈를 구하는 상태\r\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\r\n  const [isAnimating, setIsAnimating] = React.useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n  const [node, setNode] = React.useState< | React.ReactNode>(null);\r\n  const [html, setHTML] = React.useState<string | null>(null);\r\n\r\n  const resizeHandler = React.useCallback(({height}: DOMRect) => {\r\n    if(isOpen && height && !isAnimating) {\r\n      lastHeightRef.current = height;\r\n    }\r\n  }, [isOpen, isAnimating, lastHeightRef]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    ob.register(contentRef.current as HTMLDivElement, resizeHandler);\r\n    return () => ob.disconnect();\r\n  }, [resizeHandler, contentRef]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    const transitionStartHandler = () => setIsAnimating(true);\r\n    const transitionEndHandler = () => setIsAnimating(false);\r\n    // 내용이 열리고 동적으로 컨텐츠가 추가 됬을 때 사이즈 감지를 위해 스타일 속성 중 height 를 auto로 변환시킴.\r\n\r\n    const {current} = contentRef;\r\n    contentRef.current?.addEventListener?.('transitionstart', transitionStartHandler);\r\n    contentRef.current?.addEventListener?.('transitionend', transitionEndHandler);\r\n    contentRef.current?.addEventListener?.('transitioncancel', transitionEndHandler);\r\n\r\n    return () => {\r\n      current?.removeEventListener?.('transitionstart', transitionStartHandler);\r\n      current?.removeEventListener?.('transitionend', transitionEndHandler);\r\n      current?.removeEventListener?.('transitioncancel', transitionEndHandler);\r\n    }\r\n  }, [contentRef, setHeightValue, setIsAnimating]);\r\n\r\n  const setContents = React.useCallback((isOpen) => {\r\n    return new Promise((resolve) => {\r\n      const setHTMLNode = (value: React.ReactNode) => {\r\n        if(value instanceof String) {\r\n          setHTML(value as string);\r\n        } else {\r\n          setNode(value as React.ReactNode);\r\n        }\r\n        resolve(null);\r\n      }\r\n      const content = children(isOpen);\r\n      if(content instanceof Promise) {\r\n        return content.then(setHTMLNode);\r\n      } \r\n      setHTMLNode(content);\r\n    })\r\n    \r\n  }, [setHTML, setNode, contentRef, children]);\r\n\r\n  const onLoadContentHandler = React.useCallback<() => Promise<number>>(() => {\r\n    return new Promise(async (resolve, reject) => {\r\n      const contentHeightRef = await isExistWithInTimeout<{current: number}>(lastHeightRef, timeout, 200);\r\n      if(contentHeightRef) {\r\n        resolve(lastHeightRef.current);\r\n      } else {\r\n        reject(null);\r\n      }\r\n    })\r\n  }, [lastHeightRef, contentRef, timeout]);\r\n\r\n  const toggleClose = React.useCallback(() => {\r\n    setHeightValue(lastHeightRef.current + 'px');\r\n      setTimeout(() => {\r\n        setHeightValue('0px');\r\n        setTimeout(() => {\r\n          setIsOpen(false); \r\n          setContents(false);\r\n        }, duration);\r\n      });\r\n  }, [setContents, setHeightValue, setHeightValue, setIsOpen]);\r\n\r\n  const toggleOpen = React.useCallback(() => {\r\n    setIsLoading(true);\r\n    setIsOpen(true);\r\n    setIsInit(false);\r\n    setContents(true)\r\n      .then(() => {\r\n        onLoadContentHandler()\r\n          .then((height) => {\r\n            setIsLoading(false);\r\n            setTimeout(() => {\r\n              setIsInit(true);\r\n              setHeightValue('0px');\r\n              requestAnimationFrame(() => {\r\n                setHeightValue(`${height}px`);\r\n                setTimeout(() => setHeightValue('auto'), duration);\r\n              })\r\n            });\r\n          })\r\n      });\r\n  }, [setIsOpen, setIsInit, setIsLoading, setHeightValue, onLoadContentHandler, duration, children]);\r\n\r\n  const toggleHandler = React.useCallback<React.MouseEventHandler<Element>>(() => {\r\n    if(isAnimating) {\r\n      return;\r\n    }\r\n    if(isOpen) {\r\n      toggleClose();\r\n    } else {\r\n      toggleOpen();\r\n    }\r\n  }, [isOpen, isAnimating, toggleClose, toggleOpen]);\r\n\r\n  return (\r\n    <Wrapper className=\"toggle-article\">\r\n      <Title isOpen={isOpen} onClick={toggleHandler} duration={duration} className=\"toggle__title\">{title}</Title>\r\n      {(isLoading && isOpen && loading) && loading}\r\n      <Content \r\n        height={heightValue}\r\n        isInit={isInit} \r\n        ref={contentRef} \r\n        duration={duration}\r\n        will-change=\"true\"\r\n        className={`toggle__content ${isOpen ? '' : 'hidden'}`}\r\n      >\r\n        {(html || node) &&  (\r\n          html ? <div dangerouslySetInnerHTML={{__html: html}} /> : node\r\n        )}\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nAsyncToggle.displayName = 'AsyncToggle';\r\nexport default React.memo(AsyncToggle);","D:\\space\\dev\\web-api\\src\\pages\\App.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\MediaStream\\index.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\MediaStream\\Track.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\WebRTC\\Remote\\index.tsx",["224"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { io } from \"socket.io-client\";\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { Button, Header, Section, Ul } from '@src/components/styles/common';\r\nimport { H1, P } from '@src/components/styles/text';\r\nimport { Input } from '@src/components/styles/input';\r\n\r\nconst socket = io();\r\n\r\ntype Room = {\r\n  title: string;\r\n  count: number;\r\n}\r\n\r\ntype RoomCountFromSocket = {[key: string]: number};\r\n\r\nconst WebRTCRemote = () => {\r\n  const history = useHistory();\r\n  const { pathname } = useLocation();\r\n  const [inputValue, setInputValue] = React.useState<string>('');\r\n  const [roomList, setRoomList] = React.useState<Room[]>([]);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n\r\n  const inputChangeHandler = React.useCallback(({target: {value}}) => {\r\n    setInputValue(value);\r\n  }, [setInputValue]);\r\n\r\n  const buttonClickHandler = React.useCallback(() => {\r\n    socket.emit('createRoom', inputValue);\r\n    history.push(`${pathname}/${inputValue}`);\r\n  }, [inputValue, pathname, history]);\r\n\r\n  const getRoomListFromSocket = React.useCallback((rooms: RoomCountFromSocket): Room[] => {\r\n    return Object.entries(rooms).map(([key, value]) => ({\r\n      title: key,\r\n      count: value\r\n    }))\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    setLoading(true);\r\n    socket.emit('getRoomList');\r\n\r\n    socket.on('roomList', (rooms: RoomCountFromSocket) => {\r\n      setRoomList(getRoomListFromSocket(rooms));\r\n      setLoading(false);\r\n    });\r\n\r\n    socket.on('createdRoom', (roomName: string) => {\r\n      setRoomList(prev => ([\r\n        ...prev,\r\n        {title: roomName, count: 0}\r\n      ]))\r\n    });\r\n\r\n    socket.on('updatedRoom', (rooms: RoomCountFromSocket) => {\r\n      const roomList = getRoomListFromSocket(rooms);\r\n      \r\n      setRoomList(prev => {\r\n        return prev.map((room) => {\r\n          const updateRoom = roomList.find(({title}) => title === room.title);\r\n          if(updateRoom) {\r\n            return updateRoom;\r\n          }\r\n          return room;\r\n        });\r\n      })\r\n    });\r\n\r\n    socket.on('deletedRoom', (roomName: string) => {\r\n      console.log(roomName);\r\n      setRoomList(prev => prev.filter(({title}) => title !== roomName));\r\n    })\r\n  }, [setRoomList, setLoading]);\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <H1>Room List</H1>\r\n      </Header>\r\n      <Section>\r\n        {(!roomList.length && !loading) \r\n          ? <P>방이 없습니다.</P> \r\n          : loading\r\n            ? 'loading...'\r\n            : (\r\n              <Ul>\r\n                {roomList.map(({title, count}) => (\r\n                  <li key={title}>\r\n                    {count < 2 ? (\r\n                      <Link to={`${pathname}/${title}`}>{title} ({count}/2)</Link>\r\n                    ) : (\r\n                      <DisabledP>{title} ({count}/2)</DisabledP>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </Ul>\r\n            )\r\n        }\r\n      </Section>\r\n      <Section>\r\n        <Input type={inputValue} onChange={inputChangeHandler}/>\r\n        <Button onClick={buttonClickHandler}>방 추가</Button>\r\n      </Section>\r\n    </>\r\n  )\r\n};\r\n\r\nconst DisabledP = styled.p`\r\n  opacity: 0.5;\r\n`;\r\n\r\nWebRTCRemote.displayName = 'WebRTCRemote';\r\nexport default WebRTCRemote;\r\n","D:\\space\\dev\\web-api\\src\\pages\\ResizeObserver.tsx",["225"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Header, Section } from '@src/components/styles/common';\r\nimport { H1, H2, P, Code, Em } from '@src/components/styles/text';\r\nimport Toggle from '@src/components/Toggle';\r\nimport Async from '@src/components/AsyncToggle';\r\n\r\nconst MY_TEXT = '낮엔 파란하늘\\n 별이 보이는밤 \\n 기분좋은날 모두 모일까 내가사랑하는 삶을 사랑하지 나는\\n 우야야야야\\n'\r\nlet IMAGES = [\r\n  ...(process.env.REACT_APP_DUMP_IMAGES ?? '').split(','),\r\n];\r\n\r\nfor(let i = 0; i < 20; i ++) {\r\n  IMAGES.push(`https://picsum.photos/600/600/?random${Math.random() * i}`);\r\n}\r\n\r\nconst ResizeObserverPage: React.FC = () => {\r\n  const [text, setText] = React.useState<string>('');\r\n  const addTextHandler = React.useCallback(() => {\r\n    setText(prev => !!prev ? '' : MY_TEXT);\r\n  }, [setText]);\r\n\r\n  const getContents = React.useCallback((open) => {\r\n    const content = (\r\n      <GridLayout>\r\n        {IMAGES.map((url) => (\r\n          <div key={`async-${url}`}>\r\n            <img src={url} alt=\"image\"/>\r\n          </div>\r\n        ))}\r\n    </GridLayout>\r\n    )\r\n    if(open) {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve(content);\r\n        }, 500)\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <H1>ResizeObserver</H1>\r\n        <P>\r\n          ResizeObserver는 엘리먼트의 사이즈가 변경 됬을 때를 감지하여 관찰자에게 알림과 함께 요소의 크기 변경을 모니터링 할 수 있게 해주는 API이다.\r\n        </P>\r\n      </Header>\r\n      <Section>\r\n        <H2>Why?</H2>\r\n        <P>\r\n          기존에서는 엘리먼트 사이즈 변경 시 처리를 하고 싶다면, <Code>Element</Code> 이벤트 중 <Code>onresize</Code>이벤트를 등록하고, 해당 엘리먼트에 접근하여<br/>\r\n          <Code>clientHeight</Code>, <Code>getBoundingClientRect()</Code> 등 엘리먼트에 직접 접근하거나 <Code>Window.getComputedStyle()</Code>에 접근하여 크기값을 가져와야했다.<br/>\r\n          하지만 이러한 솔루션은 제한 된 사용 사례에서만 사용하고 성능에도 좋지 않으며 (프로퍼티를 접근하거나 메서드를 실행하는것 만으로 reflow가 발생함) , 브라우저 창 크기가 변경되지 않으면 작동하지 않는 경우가 많았다.          \r\n        </P>\r\n        <P>\r\n          Resize Observer API는 이러한 문제에 대한 솔루션을 제공하고 요소의 박스 모델 크기 변경을 성능적으로 제공한다.\r\n        </P>\r\n        <ExampleSection>\r\n          <Toggle title={<P>예제(텍스트)</P>}>\r\n            <P>해당 컴포넌트는 Resize Observer API를 통해 엘리먼트의 사이즈를 구하고<br/> style 속성 중 height 속성을 스위칭 시키는 형태의 컴포넌트이다.</P>\r\n            <div>\r\n              {!!text && text.split('\\n').map(text => (\r\n                  <P key={text}>\r\n                    {text}\r\n                  </P>\r\n              ))}\r\n              <P onClick={addTextHandler}><Em>텍스트 추가</Em></P>\r\n            </div>\r\n          </Toggle>\r\n        </ExampleSection>\r\n        <ExampleSection>\r\n          <Toggle title={<P>예제(이미지)</P>} duration={700}>\r\n            <GridLayout>\r\n              {IMAGES.map(url => (\r\n                <div key={url}>\r\n                  <img src={url} alt=\"banner\" />\r\n                </div>\r\n              ))}\r\n            </GridLayout>\r\n          </Toggle>\r\n        </ExampleSection>\r\n        <ExampleSection>\r\n          <Async title={<P>예제(비동기)</P>} loading={<P>Loading...</P>}>\r\n            {getContents}\r\n          </Async>\r\n        </ExampleSection>\r\n      </Section>\r\n    </>\r\n  )\r\n};\r\n\r\nconst GridLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  column-gap: 10px;\r\n  row-gap: 15px;\r\n  align-items: center;\r\n`;\r\n\r\nconst ExampleSection = styled.div`  \r\n  width: 100%;\r\n  .toggle__content {\r\n    border: 1px solid #ddd;\r\n\r\n    &.hidden {\r\n      border-color: transparent;\r\n    }\r\n  }\r\n`;\r\n\r\nResizeObserverPage.displayName = 'ResizeObserverPage';\r\nexport default ResizeObserverPage;","D:\\space\\dev\\web-api\\src\\components\\styles\\text.ts",[],"D:\\space\\dev\\web-api\\src\\components\\Toggle.tsx",["226","227","228"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport ResizeObservable from '@src/lib/ResizeObservable';\r\nimport { isExistWithInTimeout } from '@src/utils';\r\n\r\nexport interface ToggleProps {\r\n  title: React.ReactNode;\r\n  children: React.ReactNode;\r\n  duration?: number;\r\n  loading?: React.ReactNode;\r\n  timeout?: number;\r\n}\r\n\r\nconst ob = new ResizeObservable();\r\n\r\nconst Toggle: React.FC<ToggleProps> = ({\r\n  title, \r\n  children, \r\n  loading,\r\n  duration = 300, \r\n  timeout = 3000\r\n}) => {\r\n  const contentRef = React.useRef<HTMLDivElement>(null);\r\n  const lastHeightRef = React.useRef<number>(0);\r\n  const [heightValue, setHeightValue] = React.useState<string>('0px');\r\n  const [isInit, setIsInit] = React.useState<boolean>(false); // 실 컨텐츠 높이가 구해졌는가?\r\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\r\n  const [isAnimating, setIsAnimating] = React.useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n  const resizeHandler = React.useCallback(({height}: DOMRect) => {\r\n    if(isOpen && height && !isAnimating) {\r\n      lastHeightRef.current = height;\r\n    }\r\n  }, [isAnimating, isOpen, lastHeightRef]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    ob.register(contentRef.current as HTMLDivElement, resizeHandler);\r\n    return () => ob.disconnect();\r\n  }, [resizeHandler, contentRef]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    const transitionStartHandler = () => setIsAnimating(true);\r\n    const transitionEndHandler = () => setIsAnimating(false);\r\n    \r\n    contentRef.current?.addEventListener('transitionstart', transitionStartHandler);\r\n    contentRef.current?.addEventListener('transitionend', transitionEndHandler);\r\n    contentRef.current?.addEventListener('transitioncancel', transitionEndHandler);\r\n\r\n    return () => {\r\n      contentRef.current?.removeEventListener('transitionstart', transitionStartHandler);\r\n      contentRef.current?.removeEventListener('transitionend', transitionEndHandler);\r\n      contentRef.current?.removeEventListener('transitioncancel', transitionEndHandler);\r\n    }\r\n  }, [contentRef, setHeightValue, setIsAnimating]);\r\n\r\n  const onLoadContentHandler = React.useCallback<() => Promise<number>>(() => {\r\n    return new Promise(async (resolve, reject) => {\r\n      const contentHeightRef = await isExistWithInTimeout<{current: number}>(lastHeightRef, timeout, 200);\r\n      if(contentHeightRef) {\r\n        resolve(lastHeightRef.current);\r\n      } else {\r\n        reject(null);\r\n      }\r\n    })\r\n  }, [lastHeightRef, contentRef, timeout]);\r\n\r\n  const toggleClose = React.useCallback(() => {\r\n    setHeightValue(lastHeightRef.current + 'px');\r\n      setTimeout(() => {\r\n        setHeightValue('0px');\r\n        setTimeout(() => {\r\n          setIsOpen(false); \r\n        }, duration);\r\n      });\r\n  }, [setHeightValue, setHeightValue, setIsOpen]);\r\n\r\n  const toggleOpen = React.useCallback(() => {\r\n    setIsLoading(true);\r\n    setIsOpen(true);\r\n    setIsInit(false);\r\n    onLoadContentHandler()\r\n      .then((height) => {\r\n        setIsLoading(false);\r\n        setTimeout(() => {\r\n          setIsInit(true);\r\n          setHeightValue('0px');\r\n          requestAnimationFrame(() => {\r\n            setHeightValue(`${height}px`);\r\n            setTimeout(() => setHeightValue('auto'), duration);\r\n          })\r\n        });\r\n      })\r\n      \r\n  }, [setIsOpen, setIsInit, setIsLoading, setHeightValue, onLoadContentHandler, duration]);\r\n\r\n  const toggleHandler = React.useCallback<React.MouseEventHandler<Element>>(() => {\r\n    if(isAnimating) {\r\n      return;\r\n    }\r\n    if(isOpen) {\r\n      toggleClose();\r\n    } else {\r\n      toggleOpen();\r\n    }\r\n  }, [isOpen, isAnimating, toggleClose, toggleOpen]);\r\n  \r\n  // React.useEffect(() => {\r\n  //   if(isOpen) {\r\n  //     if(lastHeightRef.current) {\r\n  //       onLoadContent((contentRef.current) as Element, 'img')\r\n  //         .then(() => {\r\n  //           setIsInit(false);\r\n  //           setTimeout(() => {\r\n  //             setIsInit(true);\r\n  //             setHeightValue('0px');\r\n  //             setTimeout(() => setHeightValue(lastHeightRef.current + 'px'), 20);\r\n  //           }, 0)\r\n  //         })\r\n  //     };\r\n  //   }\r\n  // }, [isOpen, timeout, setIsLoading, setIsError, setHeightValue, setIsInit, lastHeightRef, contentRef])\r\n\r\n  return (\r\n    <Wrapper className=\"toggle-article\">\r\n      <Title isOpen={heightValue !== '0px' && isOpen} onClick={toggleHandler} duration={duration} className=\"toggle__title\">{title}</Title>\r\n      {(loading && isOpen && isLoading) && loading}\r\n      <Content \r\n        height={heightValue}\r\n        isInit={isInit} \r\n        ref={contentRef} \r\n        duration={duration}\r\n        will-change=\"true\"\r\n        className={`toggle__content ${isOpen ? '' : 'hidden'}`}\r\n      >\r\n        {isOpen && children}\r\n      </Content>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default React.memo(Toggle);\r\n\r\ninterface StyledProps {\r\n  height: string;\r\n  isInit: boolean;\r\n  isOpen: boolean;\r\n  duration: number;\r\n}\r\n\r\nexport const Title = styled.div<Pick<StyledProps, 'isOpen' | 'duration'>>`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 8px;\r\n  cursor: pointer;\r\n  &::before {\r\n    margin-right: 8px;\r\n    transition: transform ${({duration}) => duration}ms;\r\n    ${({isOpen}) => !!isOpen && ({\r\n      transform: 'rotate(90deg)'\r\n    })}\r\n    cursor: pointer;\r\n    font-size: inherit;\r\n    line-height: inherit;\r\n    content: '▶'\r\n  }\r\n`;\r\nexport const Content = styled.div<Omit<StyledProps, 'isOpen'>>`\r\n  position: relative;\r\n  padding-left: 8px;\r\n  overflow: hidden;\r\n  left: 0; \r\n  top: 0;\r\n  ${({isInit, height, duration}) => `\r\n    ${isInit ? `\r\n      transition: height ${duration}ms;\r\n      height: ${height};\r\n    ` : `\r\n      position: absolute;\r\n      z-index: -9999;\r\n      height: auto;\r\n      visibility: hidden;\r\n      opacity: 0;\r\n    `}\r\n  `};\r\n`\r\n\r\nexport const Wrapper = styled.article`\r\n  position: relative;\r\n`","D:\\space\\dev\\web-api\\src\\pages\\BackgroundTask.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\Home.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\Broadcast\\index.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\Performance\\index.tsx",[],"D:\\space\\dev\\web-api\\src\\pages\\WebRTC\\Local.tsx",["229"],"import React, { MutableRefObject } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Article, Button, Header, Section } from '@src/components/styles/common';\r\nimport { H1, H2, P } from '@src/components/styles/text';\r\n\r\nconst WebRTCLocal: React.FC = () => {\r\n  const localDisabledTracks = React.useRef<MediaStreamTrack[]>([]);\r\n  const localVideoRef = React.useRef<HTMLVideoElement>(null);\r\n  const remoteVideoRef = React.useRef<HTMLVideoElement>(null);\r\n  const userMediaStreamRef: MutableRefObject<null | MediaStream> = React.useRef(null);\r\n  \r\n  const [isPlay, setIsPlay] = React.useState<boolean>(false);\r\n  const [isVideo, setIsVideo] = React.useState<boolean>(true);\r\n  const [isAudio, setIsAudio] = React.useState<boolean>(true);\r\n  const [localPeerConnection, setLocalPeerConnection] = React.useState<RTCPeerConnection | null>(null);\r\n  const [remotePeerConnection, setRemotePeerConnection] = React.useState<RTCPeerConnection| null>(null);\r\n  \r\n  const requestGetUserMedia = React.useCallback(() => {\r\n    const constraints = {\r\n      video: isVideo,\r\n      audio: isAudio\r\n    };\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(mediaStream => {\r\n        userMediaStreamRef.current = mediaStream;\r\n        localVideoRef.current!.srcObject = mediaStream;\r\n      });\r\n  }, [localVideoRef, isVideo, isAudio, userMediaStreamRef]);\r\n\r\n  const closeUserMedia = React.useCallback(() => {\r\n    if(remoteVideoRef.current) {\r\n      remoteVideoRef.current.srcObject = null;\r\n    }\r\n    (userMediaStreamRef.current?.getTracks?.() ?? [])\r\n      .forEach(track => track.stop());\r\n    \r\n    setLocalPeerConnection(peerConnection => {\r\n      peerConnection?.close();\r\n      return null\r\n    });\r\n    setRemotePeerConnection(peerConnection => {\r\n      peerConnection?.close();\r\n      return null;\r\n    })\r\n  }, [userMediaStreamRef, remoteVideoRef, setLocalPeerConnection, setRemotePeerConnection])\r\n\r\n  const handleConnection = React.useCallback((event) => {\r\n    const peerConnection = event.target;\r\n    const iceCandidate = event.candidate;\r\n\r\n    if(iceCandidate) {\r\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\r\n      const otherPeer = peerConnection === localPeerConnection\r\n        ? remotePeerConnection \r\n        : localPeerConnection;\r\n      otherPeer!.addIceCandidate(newIceCandidate)\r\n    }\r\n  }, [localPeerConnection, remotePeerConnection]);\r\n\r\n  const onLoadLocalVideoMedaDataHandler = React.useCallback((event) => {\r\n    const {current: localVideo} = localVideoRef;\r\n    \r\n    if(localVideo && localPeerConnection && remotePeerConnection) {\r\n      const {target: {srcObject}} = event;\r\n      const tracks = (srcObject as MediaStream).getTracks();\r\n      \r\n      tracks.forEach(track => localPeerConnection.addTrack(track));\r\n      localPeerConnection.createOffer({offerToReceiveVideo: true})\r\n        .then(description => {\r\n          localPeerConnection.setLocalDescription(description);\r\n          remotePeerConnection.setRemoteDescription(description);\r\n\r\n          remotePeerConnection.createAnswer()\r\n            .then(description => {\r\n              remotePeerConnection.setLocalDescription(description);\r\n              localPeerConnection.setRemoteDescription(description);\r\n            })\r\n      });\r\n    }\r\n  }, [localVideoRef, localPeerConnection, remotePeerConnection]);\r\n\r\n  const togglePlay = React.useCallback(() => {\r\n    setIsPlay(curr => !curr);\r\n  }, [setIsPlay]);\r\n\r\n  const toggleTracks = React.useCallback((kind: 'video' | 'audio'): MediaStream => {\r\n    const {current: userMediaStream} = userMediaStreamRef;\r\n    const method = kind === 'video' ? 'getVideoTracks' : 'getAudioTracks';\r\n    const targetTracks = userMediaStream![method]() ?? [];\r\n    \r\n    if(targetTracks.length) {\r\n      const newDisabledTracks = targetTracks.map((track) => {\r\n        userMediaStream?.removeTrack(track);\r\n        return track;\r\n      });\r\n\r\n      localDisabledTracks.current = [\r\n        ...localDisabledTracks.current,\r\n        ...newDisabledTracks\r\n      ]\r\n    } else {\r\n      const disabledTracks = localDisabledTracks.current.filter((track, idx) => {\r\n        if(track.kind === kind) {\r\n          localDisabledTracks.current.splice(idx, 1);\r\n          return true;\r\n        }\r\n      })\r\n      disabledTracks.forEach((track) => {\r\n        userMediaStream!.addTrack(track);\r\n      });\r\n    }\r\n    return userMediaStream as MediaStream;\r\n  }, [userMediaStreamRef, localDisabledTracks]);\r\n\r\n  const toggleVideo = React.useCallback(() => {\r\n    setIsVideo(curr => !curr);\r\n  }, [setIsVideo]);\r\n  const toggleAudio = React.useCallback(() => {\r\n    setIsAudio(curr => !curr);\r\n  }, [setIsAudio]);\r\n\r\n  React.useEffect(() => {\r\n    if(isPlay) {\r\n      requestGetUserMedia(); \r\n      setLocalPeerConnection(new RTCPeerConnection())\r\n      setRemotePeerConnection(new RTCPeerConnection());\r\n    } else {\r\n      closeUserMedia();\r\n    }\r\n  }, [isPlay, closeUserMedia, requestGetUserMedia]);\r\n\r\n  React.useEffect(() => {\r\n    if(userMediaStreamRef.current) {\r\n      const mediaStream = toggleTracks('audio');\r\n      userMediaStreamRef.current = mediaStream;\r\n      // localVideoRef.current!.srcObject = mediaStream;\r\n    }\r\n  }, [isAudio, toggleTracks, userMediaStreamRef]);\r\n  React.useEffect(() => {\r\n    if(userMediaStreamRef.current) {\r\n      const mediaStream = toggleTracks('video');\r\n      userMediaStreamRef.current = mediaStream;\r\n    }\r\n  }, [isVideo, toggleTracks, userMediaStreamRef]);\r\n\r\n\r\n  React.useEffect(() => {\r\n    const {current} = localVideoRef;\r\n    if(current) {\r\n      current.addEventListener('loadedmetadata', onLoadLocalVideoMedaDataHandler);\r\n    }\r\n    return () => {\r\n      if(current) {\r\n        current.removeEventListener('loadedmetadata', onLoadLocalVideoMedaDataHandler);\r\n      }\r\n    }\r\n  }, [localVideoRef, onLoadLocalVideoMedaDataHandler]);\r\n  \r\n  React.useEffect(() => {\r\n    localPeerConnection?.addEventListener?.('icecandidate', handleConnection);\r\n    remotePeerConnection?.addEventListener?.('icecandidate', handleConnection);\r\n\r\n    return () => {\r\n      localPeerConnection?.removeEventListener?.('icecandidate', handleConnection);\r\n      remotePeerConnection?.removeEventListener?.('icecandidate', handleConnection);\r\n    }\r\n  }, [localPeerConnection, remotePeerConnection, handleConnection]);\r\n\r\n  React.useEffect(() => {\r\n    const addTrackHandler = (event: MediaStreamTrackEvent) => {\r\n      if(remoteVideoRef.current) {\r\n        const mediaStream = remoteVideoRef.current.srcObject \r\n          ? new MediaStream(remoteVideoRef.current.srcObject as MediaStream)\r\n          : new MediaStream();\r\n          \r\n        mediaStream.addTrack(event.track);\r\n        remoteVideoRef.current.srcObject = mediaStream;\r\n      }\r\n    }\r\n    \r\n    remotePeerConnection?.addEventListener('track', addTrackHandler);\r\n    return () => remotePeerConnection?.removeEventListener('track', addTrackHandler);\r\n  }, [remotePeerConnection, remoteVideoRef]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      closeUserMedia();\r\n    }\r\n  }, [closeUserMedia])\r\n  \r\n  return (\r\n    <>\r\n      <Header>\r\n        <H1>WebRTC</H1>\r\n        <P>\r\n            WebRTC는 웹 어플리케이션 간의 비디오나 오디오 미디어를 P2P 방식으로 데이터를 교환 하는 기술이다. <br/>\r\n            Media Stream 또는 Media Capture과 함께 비디오및 오디오, 파일 교환, 화면 공유등 다양한 인터페이스를 포함 한 멀티미디어 기능을 제공한다.<br/>            \r\n        </P>\r\n      </Header>\r\n      <FlexSection>\r\n        <Article>\r\n          <H2>Local Video</H2>\r\n          <div>\r\n            <video ref={localVideoRef} autoPlay/> <br/>\r\n            <Button onClick={togglePlay}>{isPlay ? '중지' : '촬영'}</Button>\r\n            <Button onClick={toggleAudio} disabled={!isVideo || isPlay}>오디오 {isAudio ? 'off' : 'on'}</Button>\r\n            <Button onClick={toggleVideo} disabled={!isAudio || isPlay}>비디오 {isVideo ? 'off' : 'on'}</Button>\r\n          </div>\r\n        </Article>\r\n        <Article>\r\n          <H2>Remote Video</H2>\r\n          <div>\r\n            <video ref={remoteVideoRef} autoPlay />\r\n          </div>\r\n        </Article>\r\n      </FlexSection>\r\n    </>\r\n  )\r\n};\r\n\r\nexport const FlexSection = styled(Section)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  article {\r\n    flex: 1;\r\n  }\r\n`;\r\n\r\nWebRTCLocal.displayName = 'WebRTCLocal';\r\nexport default WebRTCLocal;","D:\\space\\dev\\web-api\\src\\pages\\WebRTC.tsx",["230"],"import React, { MutableRefObject } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Article, Button, Header, Section } from '@src/components/styles/common';\r\nimport { H1, H2, P } from '@src/components/styles/text';\r\n\r\nconst WebRTC: React.FC = () => {\r\n  const localDisabledTracks = React.useRef<MediaStreamTrack[]>([]);\r\n  const localVideoRef = React.useRef<HTMLVideoElement>(null);\r\n  const remoteVideoRef = React.useRef<HTMLVideoElement>(null);\r\n  const userMediaStreamRef: MutableRefObject<null | MediaStream> = React.useRef(null);\r\n  \r\n  const [isPlay, setIsPlay] = React.useState<boolean>(false);\r\n  const [isVideo, setIsVideo] = React.useState<boolean>(true);\r\n  const [isAudio, setIsAudio] = React.useState<boolean>(true);\r\n  const [localPeerConnection, setLocalPeerConnection] = React.useState<RTCPeerConnection | null>(null);\r\n  const [remotePeerConnection, setRemotePeerConnection] = React.useState<RTCPeerConnection| null>(null);\r\n  \r\n  const requestGetUserMedia = React.useCallback(() => {\r\n    const constraints = {\r\n      video: isVideo,\r\n      audio: isAudio\r\n    };\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(mediaStream => {\r\n        userMediaStreamRef.current = mediaStream;\r\n        localVideoRef.current!.srcObject = mediaStream;\r\n      });\r\n  }, [localVideoRef, isVideo, isAudio, userMediaStreamRef]);\r\n\r\n  const closeUserMedia = React.useCallback(() => {\r\n    if(remoteVideoRef.current) {\r\n      remoteVideoRef.current.srcObject = null;\r\n    }\r\n    (userMediaStreamRef.current?.getTracks?.() ?? [])\r\n      .forEach(track => track.stop());\r\n    \r\n    setLocalPeerConnection(peerConnection => {\r\n      peerConnection?.close();\r\n      return null\r\n    });\r\n    setRemotePeerConnection(peerConnection => {\r\n      peerConnection?.close();\r\n      return null;\r\n    })\r\n  }, [userMediaStreamRef, remoteVideoRef, setLocalPeerConnection, setRemotePeerConnection])\r\n\r\n  const handleConnection = React.useCallback((event) => {\r\n    const peerConnection = event.target;\r\n    const iceCandidate = event.candidate;\r\n\r\n    if(iceCandidate) {\r\n      const newIceCandidate = new RTCIceCandidate(iceCandidate);\r\n      const otherPeer = peerConnection === localPeerConnection\r\n        ? remotePeerConnection \r\n        : localPeerConnection;\r\n      otherPeer!.addIceCandidate(newIceCandidate)\r\n    }\r\n  }, [localPeerConnection, remotePeerConnection]);\r\n\r\n  const onLoadLocalVideoMedaDataHandler = React.useCallback((event) => {\r\n    const {current: localVideo} = localVideoRef;\r\n    \r\n    if(localVideo && localPeerConnection && remotePeerConnection) {\r\n      const {target: {srcObject}} = event;\r\n      const tracks = (srcObject as MediaStream).getTracks();\r\n      \r\n      tracks.forEach(track => localPeerConnection.addTrack(track));\r\n      localPeerConnection.createOffer({offerToReceiveVideo: true})\r\n        .then(description => {\r\n          localPeerConnection.setLocalDescription(description);\r\n          remotePeerConnection.setRemoteDescription(description);\r\n\r\n          remotePeerConnection.createAnswer()\r\n            .then(description => {\r\n              remotePeerConnection.setLocalDescription(description);\r\n              localPeerConnection.setRemoteDescription(description);\r\n            })\r\n      });\r\n    }\r\n  }, [localVideoRef, localPeerConnection, remotePeerConnection]);\r\n\r\n  const togglePlay = React.useCallback(() => {\r\n    setIsPlay(curr => !curr);\r\n  }, [setIsPlay]);\r\n\r\n  const toggleTracks = React.useCallback((kind: 'video' | 'audio'): MediaStream => {\r\n    const {current: userMediaStream} = userMediaStreamRef;\r\n    const method = kind === 'video' ? 'getVideoTracks' : 'getAudioTracks';\r\n    const targetTracks = userMediaStream![method]() ?? [];\r\n    \r\n    if(targetTracks.length) {\r\n      const newDisabledTracks = targetTracks.map((track) => {\r\n        userMediaStream?.removeTrack(track);\r\n        return track;\r\n      });\r\n\r\n      localDisabledTracks.current = [\r\n        ...localDisabledTracks.current,\r\n        ...newDisabledTracks\r\n      ]\r\n    } else {\r\n      const disabledTracks = localDisabledTracks.current.filter((track, idx) => {\r\n        if(track.kind === kind) {\r\n          localDisabledTracks.current.splice(idx, 1);\r\n          return true;\r\n        }\r\n      })\r\n      disabledTracks.forEach((track) => {\r\n        userMediaStream!.addTrack(track);\r\n      });\r\n    }\r\n    return userMediaStream as MediaStream;\r\n  }, [userMediaStreamRef, localDisabledTracks]);\r\n\r\n  const toggleVideo = React.useCallback(() => {\r\n    setIsVideo(curr => !curr);\r\n  }, [setIsVideo]);\r\n  const toggleAudio = React.useCallback(() => {\r\n    setIsAudio(curr => !curr);\r\n  }, [setIsAudio]);\r\n\r\n  React.useEffect(() => {\r\n    if(isPlay) {\r\n      requestGetUserMedia(); \r\n      setLocalPeerConnection(new RTCPeerConnection())\r\n      setRemotePeerConnection(new RTCPeerConnection());\r\n    } else {\r\n      closeUserMedia();\r\n    }\r\n  }, [isPlay, closeUserMedia, requestGetUserMedia]);\r\n\r\n  React.useEffect(() => {\r\n    if(userMediaStreamRef.current) {\r\n      const mediaStream = toggleTracks('audio');\r\n      userMediaStreamRef.current = mediaStream;\r\n      // localVideoRef.current!.srcObject = mediaStream;\r\n    }\r\n  }, [isAudio, toggleTracks, userMediaStreamRef]);\r\n  React.useEffect(() => {\r\n    if(userMediaStreamRef.current) {\r\n      const mediaStream = toggleTracks('video');\r\n      userMediaStreamRef.current = mediaStream;\r\n    }\r\n  }, [isVideo, toggleTracks, userMediaStreamRef]);\r\n\r\n\r\n  React.useEffect(() => {\r\n    const {current} = localVideoRef;\r\n    if(current) {\r\n      current.addEventListener('loadedmetadata', onLoadLocalVideoMedaDataHandler);\r\n    }\r\n    return () => {\r\n      if(current) {\r\n        current.removeEventListener('loadedmetadata', onLoadLocalVideoMedaDataHandler);\r\n      }\r\n    }\r\n  }, [localVideoRef, onLoadLocalVideoMedaDataHandler]);\r\n  \r\n  React.useEffect(() => {\r\n    localPeerConnection?.addEventListener?.('icecandidate', handleConnection);\r\n    remotePeerConnection?.addEventListener?.('icecandidate', handleConnection);\r\n\r\n    return () => {\r\n      localPeerConnection?.removeEventListener?.('icecandidate', handleConnection);\r\n      remotePeerConnection?.removeEventListener?.('icecandidate', handleConnection);\r\n    }\r\n  }, [localPeerConnection, remotePeerConnection, handleConnection]);\r\n\r\n  React.useEffect(() => {\r\n    const addTrackHandler = (event: MediaStreamTrackEvent) => {\r\n      if(remoteVideoRef.current) {\r\n        const mediaStream = remoteVideoRef.current.srcObject \r\n          ? new MediaStream(remoteVideoRef.current.srcObject as MediaStream)\r\n          : new MediaStream();\r\n          \r\n        mediaStream.addTrack(event.track);\r\n        remoteVideoRef.current.srcObject = mediaStream;\r\n      }\r\n    }\r\n    \r\n    remotePeerConnection?.addEventListener('track', addTrackHandler);\r\n    return () => remotePeerConnection?.removeEventListener('track', addTrackHandler);\r\n  }, [remotePeerConnection, remoteVideoRef]);\r\n  \r\n  return (\r\n    <>\r\n      <Header>\r\n        <H1>WebRTC</H1>\r\n        <P>\r\n            WebRTC는 웹 어플리케이션 간의 비디오나 오디오 미디어를 P2P 방식으로 데이터를 교환 하는 기술이다. <br/>\r\n            Media Stream 또는 Media Capture과 함께 비디오및 오디오, 파일 교환, 화면 공유등 다양한 인터페이스를 포함 한 멀티미디어 기능을 제공한다.<br/>            \r\n        </P>\r\n      </Header>\r\n      <FlexSection>\r\n        <Article>\r\n          <H2>Local Video</H2>\r\n          <div>\r\n            <video ref={localVideoRef} autoPlay/> <br/>\r\n            <Button onClick={togglePlay}>{isPlay ? '중지' : '촬영'}</Button>\r\n            <Button onClick={toggleAudio} disabled={!isVideo || isPlay}>오디오 {isAudio ? 'off' : 'on'}</Button>\r\n            <Button onClick={toggleVideo} disabled={!isAudio || isPlay}>비디오 {isVideo ? 'off' : 'on'}</Button>\r\n          </div>\r\n        </Article>\r\n        <Article>\r\n          <H2>Remote Video</H2>\r\n          <div>\r\n            <video ref={remoteVideoRef} autoPlay />\r\n          </div>\r\n        </Article>\r\n      </FlexSection>\r\n    </>\r\n  )\r\n};\r\n\r\nconst FlexSection = styled(Section)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  article {\r\n    flex: 1;\r\n  }\r\n`;\r\n\r\nWebRTC.displayName = 'WebRTC';\r\nexport default WebRTC;","D:\\space\\dev\\web-api\\src\\components\\styles\\input.ts",[],"D:\\space\\dev\\web-api\\src\\components\\PerformanceTestButton.tsx",[],"D:\\space\\dev\\web-api\\src\\utils\\index.ts",[],"D:\\space\\dev\\web-api\\src\\lib\\ResizeObservable.ts",[],"D:\\space\\dev\\video-chat\\src\\index.tsx",[],["231","232"],"D:\\space\\dev\\video-chat\\src\\pages\\App.tsx",[],"D:\\space\\dev\\video-chat\\src\\pages\\Detail.tsx",["233"],"D:\\space\\dev\\video-chat\\src\\pages\\index.tsx",["234","235"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { css } from '@emotion/react';\r\nimport { io } from \"socket.io-client\";\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { Button, Header, Layout, Section, Ul } from '@src/components/styles/common';\r\nimport { H1, P } from '@src/components/styles/text';\r\nimport { Room } from '@src/types';\r\nimport RoomFormPopup from '@src/components/popup/RoomFormPopup';\r\n\r\nconst socket = io();\r\n\r\nconst Chatting = () => {\r\n  const history = useHistory();\r\n  const { pathname } = useLocation();\r\n  const [inputValue, setInputValue] = React.useState<string>('');\r\n  const [roomList, setRoomList] = React.useState<Room[]>([]);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const [openForm, setOpenForm] = React.useState<boolean>(false);\r\n  \r\n  const toggleFormPopup = React.useCallback(() => {\r\n    setOpenForm(prev => !prev);\r\n  }, [setOpenForm]);\r\n\r\n  const inputChangeHandler = React.useCallback(({target: {value}}) => {\r\n    setInputValue(value);\r\n  }, [setInputValue]);\r\n\r\n  const buttonClickHandler = React.useCallback(() => {\r\n    socket.emit('createRoom', inputValue);\r\n    history.push(`${pathname}/${inputValue}`);\r\n  }, [inputValue, pathname, history]);\r\n\r\n\r\n  React.useEffect(() => {\r\n    setLoading(true);\r\n    socket.emit('getRoomList');\r\n\r\n    socket.on('roomList', (rooms: Room[]) => {\r\n      setRoomList(rooms);\r\n      setLoading(false);\r\n    });\r\n\r\n    socket.on('createdRoom', (room: Room) => {\r\n      setRoomList(prev => ([\r\n        ...prev,\r\n        room\r\n      ]))\r\n    });\r\n\r\n    socket.on('updatedRoom', (updateRoom: Room) => {\r\n      setRoomList(prev => (\r\n        prev.map(room => room.id === updateRoom.id \r\n          ? updateRoom \r\n          : room\r\n        )\r\n      ))\r\n    });\r\n\r\n    socket.on('deletedRoom', (roomId: string) => {\r\n      setRoomList(prev => prev.filter(({id}) => id !== roomId));\r\n    })\r\n  }, [setRoomList, setLoading]);\r\n\r\n  const roomItemComp = React.useCallback((room: Room) => {\r\n    return (\r\n      <RoomInfo>\r\n        <strong>{room.title}</strong>\r\n        <p>{room.description}</p>\r\n        <small>[ {room.users.length} / {room.size} ]</small>\r\n      </RoomInfo>\r\n    )\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      <RoomFormPopup open={openForm} closeCallback={toggleFormPopup} />\r\n      <Header>\r\n        <H1>Chat List</H1>\r\n      </Header>\r\n      <Section>\r\n        {(!roomList.length && !loading) \r\n          ? <EmptyText>방이 없습니다.</EmptyText> \r\n          : loading\r\n            ? 'loading...'\r\n            : (\r\n              <Ul>\r\n                {roomList.map(room => (\r\n                  <Li key={room.id}>\r\n                    {room?.size > room?.users?.length ? (\r\n                      <Link to={`/${room.id}`}>{roomItemComp(room)}</Link>\r\n                    ) : roomItemComp(room)}\r\n                  </Li>\r\n                ))}\r\n              </Ul>\r\n            )\r\n        }\r\n      </Section>\r\n      <Section\r\n        css={css`\r\n          display: flex;\r\n          justify-content: flex-end;\r\n        `}\r\n      >\r\n        <Button width={150} height={50} onClick={toggleFormPopup}>\r\n          방 생성\r\n        </Button>\r\n        {/* <Input type={inputValue} onChange={inputChangeHandler} />\r\n        <Button onClick={buttonClickHandler}>방 추가</Button> */}\r\n      </Section>\r\n    </Layout>\r\n  )\r\n};\r\n\r\nconst EmptyText = styled(P)`\r\n  padding: 50px 0;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #ddd;\r\n  border-style: solid;\r\n  border-color: #ddd;\r\n  border-width: 1px 0;\r\n  text-align: center;\r\n`;\r\n\r\nconst Li = styled.li`\r\n  a {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst RoomInfo = styled.div`\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  strong {\r\n    margin-right: 10px;\r\n    color: #333;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n  }\r\n  p {\r\n    font-size: 14px;\r\n    color: #666;\r\n\r\n  }\r\n  small {\r\n    position: absolute;\r\n    right: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    font-size: 13px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nChatting.displayName = 'Chatting';\r\nexport default Chatting;\r\n","D:\\space\\dev\\video-chat\\src\\components\\styles\\common.ts",[],"D:\\space\\dev\\video-chat\\src\\components\\styles\\text.ts",[],"D:\\space\\dev\\video-chat\\src\\components\\styles\\input.ts",[],["236","237"],"D:\\space\\dev\\video-chat\\src\\utils\\index.ts",[],"D:\\space\\dev\\video-chat\\src\\atoms\\user.ts",[],"D:\\space\\dev\\video-chat\\src\\components\\layout\\Header.tsx",[],"D:\\space\\dev\\video-chat\\src\\components\\common\\Tooltip.tsx",[],"D:\\space\\dev\\video-chat\\src\\components\\common\\Profile.tsx",[],"D:\\space\\dev\\video-chat\\src\\components\\popup\\UserFormPopup.tsx",[],"D:\\space\\dev\\video-chat\\src\\components\\common\\Modal.tsx",["238","239"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport {keyframes, css, SerializedStyles} from '@emotion/react';\r\n \r\ntype VerticalAlign = 'top' | 'center' | 'bottom';\r\n\r\nexport interface ModalProps {\r\n  closeCallback: () => void;\r\n  onClose?: () => void;\r\n  open?: boolean;\r\n  verticalAlign?: VerticalAlign;\r\n  animationDuration?: number;\r\n  children: React.ReactNode | React.ComponentType;\r\n}\r\n\r\nconst ANIMATION_DURATION = 500;\r\n\r\nconst Modal: React.FC<ModalProps> = ({\r\n  closeCallback,\r\n  onClose,\r\n  open: _open = true,\r\n  verticalAlign = 'center',\r\n  animationDuration = ANIMATION_DURATION,\r\n  children\r\n}) => {\r\n  const [isActive, setIsActive] = React.useState(false);\r\n  const [isOpen, setIsOpen] = React.useState(_open);\r\n\r\n  const closeClickHandler = React.useCallback(() => {\r\n    closeCallback();\r\n  }, [closeCallback]);\r\n  \r\n  React.useEffect(() => {\r\n    if(isOpen) {\r\n      setTimeout(() => {\r\n        setIsActive(true);\r\n      });\r\n    }\r\n  }, [isOpen, setIsActive]);\r\n  \r\n  React.useEffect(() => {\r\n    if(_open) {\r\n      setIsOpen(_open)\r\n    } else {\r\n      setIsActive(false);\r\n      setTimeout(() => {\r\n        setIsOpen(false);\r\n        onClose && onClose();\r\n      }, animationDuration);\r\n    }\r\n  }, [_open, setIsOpen, setIsActive, onClose]);\r\n  \r\n  return (\r\n    isOpen ? (\r\n      <ModalWrapper active={isActive} align={verticalAlign}>\r\n        {isActive && (\r\n          <CloseButton onClick={closeClickHandler}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRJDdZshAt7YOtpxOZ0FbQ6xUB8BxZ2HcNyx3dQ2Y_4MFUfiuh0DYtY5WlOp5xRmnXs9lA&usqp=CAU\" title=\"close\" />\r\n          </CloseButton>\r\n        )}\r\n        <ModalBg duration={animationDuration} onClick={closeClickHandler} />\r\n        <ModalWindow css={isActive \r\n          ? css`\r\n            animation-name: ${openKeyFrame};\r\n            animation-duration: ${animationDuration}ms;\r\n            animation-fill-mode: forwards;\r\n          ` \r\n          : null}>\r\n          {children}\r\n        </ModalWindow>\r\n      </ModalWrapper>\r\n    ) : null\r\n  )\r\n};\r\n\r\nModal.displayName = 'Modal';\r\nexport default React.memo(Modal);\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  right: 50px;\r\n  top: 50px;\r\n  width: 40px;\r\n  height: 40px;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  border-radius: 50%;\r\n  font-size: 0;\r\n  z-index: 20;\r\n\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nconst ModalBg = styled.div<{duration: number}>`\r\n  position: fixed;\r\n  left: 0; \r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  opacity: 0;\r\n  transition: all ${({duration}) => `${duration}ms`};\r\n`;\r\n\r\nconst openKeyFrame = keyframes`\r\n  0 {\r\n    transform: scale(0);\r\n  }\r\n  80% {\r\n    transform: scale(1.1);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n`;\r\n\r\n\r\nconst ModalWindow = styled.div<{css?: SerializedStyles | null}>`\r\n  position: relative;\r\n  display: inline-block;\r\n  width: auto;\r\n  max-width: 80%;\r\n  margin: 50px 0;\r\n  z-index: 1;\r\n  transform: scale(0);\r\n  text-align: left;\r\n  ${({css}) => css && css};\r\n`;\r\n\r\nconst ModalWrapper = styled.div<{active: boolean, align: VerticalAlign}>`\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1000;\r\n  text-align: center;\r\n  overflow-y: auto;\r\n  justify-content: center;\r\n  \r\n  ${({active, align}) => active && `\r\n    ${ModalBg} {\r\n      opacity: 1;\r\n    }\r\n    align-items: ${align === 'top' \r\n      ? 'flex-start' \r\n      : align === 'bottom' \r\n        ? 'flex-end'\r\n        : 'center'\r\n    }\r\n  `}\r\n`;\r\n\r\n\r\n\r\n","D:\\space\\dev\\video-chat\\src\\components\\form\\InputField.tsx",["240","241"],"import React, { ChangeEvent, ChangeEventHandler, FocusEventHandler, KeyboardEventHandler } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { throttle } from 'throttle-debounce';\r\nimport { Rule } from '@src/types';\r\n\r\ninterface Props {\r\n  defaultValue?: string;\r\n  name?: string;\r\n  type?: 'text' | 'password' | 'number';\r\n  icon?: React.ReactNode;\r\n  placeholder?: string;\r\n  onChange: (value: string) => void;\r\n  rules?: Rule[];\r\n  required?: boolean\r\n}\r\nconst InputField: React.FC<Props> = ({\r\n  onChange,\r\n  name = '',\r\n  type = 'text',\r\n  placeholder,\r\n  icon,\r\n  defaultValue = '',\r\n  required = false,\r\n  rules = []\r\n}) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const [value, setValue] = React.useState<string>(defaultValue);\r\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\r\n\r\n  const validateRules = React.useCallback((value): boolean => {\r\n    if(required && !value) {\r\n      setErrorMessage('입력해주세요.');\r\n      return false;\r\n    }\r\n    const isComplete = rules.every(({regex, message}) => {\r\n      if(regex && !regex.test(value)) {\r\n        setErrorMessage(message);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    if(isComplete) {\r\n      setErrorMessage('');\r\n    }\r\n    return isComplete;\r\n  }, [rules, required, value, setErrorMessage]);\r\n\r\n  const inputKeyupHandler = React.useCallback<KeyboardEventHandler<HTMLInputElement>>(({key}) => {\r\n    if(key !== 'Tab') {\r\n      validateRules(inputRef.current?.value ?? ''); \r\n    }\r\n  }, [validateRules, inputRef]);\r\n\r\n  const throttledKeyupHandler = React.useMemo(() => throttle(200, inputKeyupHandler), [inputKeyupHandler]);\r\n\r\n  const inputBlurHandler = React.useCallback<FocusEventHandler<HTMLInputElement>>(({target: {value}}) => {\r\n    validateRules(value);\r\n  }, [validateRules]);\r\n\r\n  const inputChangeHandler = React.useCallback<ChangeEventHandler<HTMLInputElement>>((event) => {\r\n    const {target: {value}} = event;\r\n    setValue(value);\r\n    validateRules(value);\r\n  }, [setValue, validateRules]);\r\n\r\n  React.useEffect(() => {\r\n    onChange && onChange(errorMessage ? '' : value);\r\n  }, [value, errorMessage, onChange]);\r\n\r\n  return (\r\n    <Wrapper className=\"input-field\">\r\n      <Field active={!!value}>\r\n        <FieldLabel>\r\n          {placeholder && (\r\n            <FieldLabelText>{placeholder}</FieldLabelText>\r\n          )}\r\n          <FieldInput \r\n            ref={inputRef}\r\n            name={name}\r\n            type={type} \r\n            value={value} \r\n            onChange={inputChangeHandler} \r\n            onBlur={inputBlurHandler}\r\n            onKeyUp={throttledKeyupHandler}\r\n          />\r\n        </FieldLabel>\r\n        {icon && (\r\n          <FieldIcon>{icon}</FieldIcon>\r\n        )}\r\n      </Field>\r\n      {errorMessage && (\r\n        <ErrorMessage>{errorMessage}</ErrorMessage>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nInputField.displayName = 'InputField';\r\nexport default React.memo(InputField);\r\n\r\nconst Wrapper = styled.div`\r\n\r\n`;\r\n\r\nconst ErrorMessage = styled.p`\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n  color: red;\r\n`;\r\n\r\nconst FieldIcon = styled.i`\r\n  flex: 1 1 auto;\r\n  padding-right: 8px;\r\n`\r\n\r\nconst FieldLabel = styled.label`\r\n  flex: 1 1 auto;\r\n  width: 100%;\r\n  cursor: text;\r\n`;\r\n\r\nconst FieldLabelText = styled.span`\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 0;\r\n  transform-origin: 0 50%;\r\n  transition: all 300ms;\r\n  color: #999;\r\n  line-height: 36px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst FieldInput = styled.input`\r\n  border: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`\r\n\r\nconst Field = styled.div<{active: boolean}>`\r\n  display: flex;\r\n  position: relative;\r\n  height: 36px;\r\n  padding: 0 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  align-items: center;\r\n\r\n  ${({active}) => active && `\r\n    ${FieldLabelText} {\r\n      transform: scale(.833) translateY(-10px);\r\n    }\r\n    ${FieldInput} {\r\n      padding-top: 10px;\r\n    }\r\n  `}\r\n`;","D:\\space\\dev\\video-chat\\src\\components\\form\\base\\index.tsx",[],"D:\\space\\dev\\video-chat\\src\\components\\form\\base\\context.tsx",[],"D:\\space\\dev\\video-chat\\src\\components\\form\\base\\Form.tsx",["242"],"import React, { FormEventHandler } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { formContext } from './context';\r\n\r\ntype FormDataState = {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface FormProps {\r\n  onSubmit: <T = FormDataState>(formData: T) => void;\r\n  children: React.ReactNode | React.ComponentType;\r\n}\r\n\r\nconst Form: React.FC<FormProps> = ({onSubmit, children}) => {\r\n  const [formData] = React.useContext(formContext);\r\n  const formValues = React.useMemo(() => Object.values(formData), [formData]);\r\n  const isComplete = React.useMemo(() => formValues.every(val => !!val), [formValues]);\r\n\r\n  const formSubmitHandler = React.useCallback<FormEventHandler>((e) => {\r\n    e.preventDefault();\r\n    if(isComplete) {\r\n      onSubmit(formData);\r\n    }\r\n  }, [onSubmit, formData, isComplete]);\r\n\r\n  return (\r\n    <form onSubmit={formSubmitHandler}>\r\n      {children}\r\n    </form>\r\n  )\r\n};\r\n\r\n\r\nForm.displayName = 'Form';\r\nexport default React.memo(Form);\r\n","D:\\space\\dev\\video-chat\\src\\components\\form\\base\\FormItem.tsx",["243","244","245"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport InputField from '../InputField';\r\nimport { formContext } from './context';\r\nimport { Rule } from '@src/types';\r\n\r\ninterface Props {\r\n  name: string;\r\n  type?: 'text' | 'password' | 'number';\r\n  title?: string; \r\n  defaultValue?: string;\r\n  rules?: Rule[];\r\n  placeholder?: string;\r\n  required?: boolean;\r\n}\r\n\r\ninterface InnerProps extends Props {\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nconst _InnerFormItem: React.FC<InnerProps> = ({\r\n  name,\r\n  type,\r\n  title,\r\n  defaultValue,\r\n  placeholder,\r\n  rules,\r\n  required = false,\r\n  onChange\r\n}) => {\r\n  return (\r\n    <StyledFormItem>\r\n      <InputField\r\n        name={name}\r\n        type={type}\r\n        defaultValue={defaultValue}\r\n        placeholder={placeholder ?? title ?? ''}\r\n        onChange={onChange} \r\n        rules={rules}\r\n        required={required}\r\n      />\r\n    </StyledFormItem>\r\n  )\r\n}\r\n\r\n_InnerFormItem.displayName = 'InnerFormItem';\r\nconst InnerFormItem = React.memo(_InnerFormItem);\r\n\r\nconst FormItem: React.FC<Props> = (props) => {\r\n  const {name, defaultValue, required = false} = props;\r\n  const [_, setFormData] = React.useContext(formContext);\r\n\r\n  const deleteFormData = React.useCallback(() => {\r\n    setFormData(prev => {\r\n      const next = {...prev};\r\n      delete next[name];\r\n      return next;\r\n    })\r\n  }, [setFormData]);\r\n\r\n  const valueChangeHandler = React.useCallback((value) => {\r\n    if(!required && !value) {\r\n      deleteFormData();\r\n    } else {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [name]: value\r\n      }));\r\n    }\r\n    \r\n  }, [name, required, setFormData, deleteFormData]);\r\n\r\n  React.useEffect(() => {\r\n    if(required) {\r\n      valueChangeHandler(defaultValue)\r\n    }\r\n\r\n    return () => deleteFormData();\r\n  }, [name, defaultValue, required, required, valueChangeHandler, deleteFormData]);\r\n  \r\n  return (\r\n    <InnerFormItem \r\n      {...props} \r\n      defaultValue={defaultValue}\r\n      onChange={valueChangeHandler} \r\n    />  \r\n  )\r\n}\r\n\r\nFormItem.displayName = 'FormItem';\r\nexport default React.memo(FormItem);\r\n\r\nconst StyledFormItem = styled.div`\r\n  & ~ & {\r\n    margin-top: 20px;\r\n  }\r\n`","D:\\space\\dev\\video-chat\\src\\constant\\theme.ts",[],"D:\\space\\dev\\video-chat\\src\\components\\popup\\RoomFormPopup.tsx",["246"],"import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { nanoid } from 'nanoid';\r\nimport { io } from \"socket.io-client\";\r\nimport Form, { FormItem } from '../form/base';\r\nimport { PopupBody, PopupHeader, PopupTitle, RadiusButton } from '../styles/common';\r\nimport { ButtonGroup } from './UserFormPopup';\r\nimport { Room } from '@src/types';\r\nimport Modal, {ModalProps} from '../common/Modal';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { userSelector } from '@src/atoms/user';\r\n\r\nconst socket = io();\r\n\r\ninterface Props extends Pick<ModalProps, 'open' | 'closeCallback'> {}\r\n\r\nconst RoomFormPopup: React.FC<Props> = ({open, closeCallback}) => {\r\n  const user = useRecoilValue(userSelector);\r\n  const history = useHistory();\r\n  const id = React.useMemo(() => nanoid(), []);\r\n\r\n  const formSubmitHandler = React.useCallback((formData) => {\r\n    const size = 2;\r\n    const password = '';\r\n\r\n    socket.emit('createRoom', {\r\n      id,\r\n      size,\r\n      password,\r\n      ...formData,\r\n    });\r\n  }, [id]);\r\n\r\n  React.useEffect(() => {\r\n    const createdHandler = (room: Room) => {\r\n      if(id === room.id) {\r\n        history.push(`/${room.id}`);\r\n      }\r\n    }\r\n    socket.on('createdRoom', createdHandler);\r\n\r\n    return () => {\r\n      socket.off('createdRoom', createdHandler);\r\n    }\r\n  }, [history, id]);\r\n\r\n  return (\r\n    <Modal\r\n      verticalAlign=\"center\" \r\n      open={open} \r\n      closeCallback={closeCallback}\r\n    >\r\n      <PopupBody>\r\n        <PopupHeader>\r\n          <PopupTitle>채팅 방 생성</PopupTitle>\r\n        </PopupHeader>\r\n        <Form onSubmit={formSubmitHandler}>\r\n          <FormItem name=\"title\" title=\"제목\" required />\r\n          <FormItem name=\"description\" title=\"설명\" />\r\n          \r\n          <ButtonGroup>\r\n            <RadiusButton type=\"button\">\r\n              취소\r\n            </RadiusButton>\r\n            <RadiusButton type=\"submit\">확인</RadiusButton>\r\n          </ButtonGroup>\r\n        </Form>\r\n      </PopupBody>\r\n    </Modal>\r\n  )\r\n};\r\n\r\nRoomFormPopup.displayName = 'RoomFormPopup';\r\nexport default React.memo(RoomFormPopup);\r\n","D:\\space\\dev\\video-chat\\src\\components\\common\\UserVideo.tsx",["247","248"],"import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { User } from '@src/types';\r\nimport Profile from './Profile';\r\n\r\ninterface Props {\r\n  user?: User;\r\n  peer?: RTCPeerConnection;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst UserVideo = React.forwardRef<any, Props>(({\r\n  user,\r\n  peer,\r\n  children\r\n}, ref) => {\r\n  const videoRef = React.useRef<HTMLVideoElement>(null);\r\n  const [_, forceUpdate] = React.useState(0);\r\n  React.useImperativeHandle(ref, () => videoRef.current);\r\n  React.useEffect(() => {\r\n    const addTrackHandler = (event: MediaStreamTrackEvent) => {\r\n      if(videoRef.current) {\r\n        const mediaStream = (videoRef.current.srcObject as MediaStream | undefined) ?? new MediaStream();\r\n        mediaStream.addTrack(event.track);\r\n        videoRef.current.srcObject = mediaStream;\r\n      }\r\n    }\r\n    if(peer) {\r\n      peer.addEventListener('track', addTrackHandler);\r\n      return () => {\r\n        peer.removeEventListener('track', addTrackHandler);\r\n      }\r\n    }\r\n  }, [peer, videoRef]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Video ref={videoRef} autoPlay />\r\n      {user && (\r\n        <UserWrapper>\r\n          <Profile user={user} />\r\n          <UserInfo>\r\n            <p>\r\n              <strong>{user.name}</strong>\r\n            </p>\r\n            {user.message && (\r\n              <p>{user.message}</p>\r\n            )}\r\n          </UserInfo>\r\n          {children && children}\r\n        </UserWrapper>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n})\r\n\r\nUserVideo.displayName = 'UserVideo';\r\nexport default React.memo(UserVideo);\r\n\r\nconst Wrapper = styled.div`\r\n\r\n`;\r\n\r\nconst UserWrapper = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  display: flex;\r\n  font-size: 14px;\r\n  margin-left: 10px;\r\n  align-items: center;\r\n`;\r\n\r\nconst Video = styled.video`\r\n  display: block;\r\n  width: 100%;\r\n`;",{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","severity":1,"message":"254","line":24,"column":9,"nodeType":"255","endLine":30,"endColumn":4},{"ruleId":"253","severity":1,"message":"256","line":49,"column":6,"nodeType":"257","endLine":49,"endColumn":16,"suggestions":"258"},{"ruleId":"253","severity":1,"message":"259","line":72,"column":6,"nodeType":"257","endLine":72,"endColumn":46,"suggestions":"260"},{"ruleId":"253","severity":1,"message":"259","line":83,"column":6,"nodeType":"257","endLine":83,"endColumn":42,"suggestions":"261"},{"ruleId":"253","severity":1,"message":"262","line":94,"column":6,"nodeType":"257","endLine":94,"endColumn":62,"suggestions":"263"},{"ruleId":"253","severity":1,"message":"264","line":115,"column":6,"nodeType":"257","endLine":115,"endColumn":100,"suggestions":"265"},{"ruleId":"253","severity":1,"message":"266","line":75,"column":6,"nodeType":"257","endLine":75,"endColumn":31,"suggestions":"267"},{"ruleId":"268","severity":1,"message":"269","line":28,"column":13,"nodeType":"270","endLine":28,"endColumn":41},{"ruleId":"253","severity":1,"message":"271","line":53,"column":18,"nodeType":"272","endLine":53,"endColumn":25},{"ruleId":"253","severity":1,"message":"259","line":66,"column":6,"nodeType":"257","endLine":66,"endColumn":42,"suggestions":"273"},{"ruleId":"253","severity":1,"message":"262","line":76,"column":6,"nodeType":"257","endLine":76,"endColumn":49,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":102,"column":78,"nodeType":"277","messageId":"278","endLine":102,"endColumn":80},{"ruleId":"275","severity":1,"message":"276","line":102,"column":78,"nodeType":"277","messageId":"278","endLine":102,"endColumn":80},{"ruleId":"249","replacedBy":"279"},{"ruleId":"251","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":292,"column":7,"nodeType":"272","messageId":"283","endLine":292,"endColumn":11},{"ruleId":"281","severity":1,"message":"284","line":25,"column":9,"nodeType":"272","messageId":"283","endLine":25,"endColumn":27},{"ruleId":"281","severity":1,"message":"285","line":29,"column":9,"nodeType":"272","messageId":"283","endLine":29,"endColumn":27},{"ruleId":"249","replacedBy":"286"},{"ruleId":"251","replacedBy":"287"},{"ruleId":"253","severity":1,"message":"288","line":51,"column":6,"nodeType":"257","endLine":51,"endColumn":46,"suggestions":"289"},{"ruleId":"290","severity":1,"message":"291","line":58,"column":13,"nodeType":"270","endLine":58,"endColumn":173},{"ruleId":"281","severity":1,"message":"292","line":1,"column":17,"nodeType":"272","messageId":"283","endLine":1,"endColumn":28},{"ruleId":"253","severity":1,"message":"293","line":46,"column":6,"nodeType":"257","endLine":46,"endColumn":47,"suggestions":"294"},{"ruleId":"281","severity":1,"message":"295","line":2,"column":8,"nodeType":"272","messageId":"283","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"296","line":51,"column":10,"nodeType":"272","messageId":"283","endLine":51,"endColumn":11},{"ruleId":"253","severity":1,"message":"297","line":59,"column":6,"nodeType":"257","endLine":59,"endColumn":19,"suggestions":"298"},{"ruleId":"253","severity":1,"message":"299","line":79,"column":6,"nodeType":"257","endLine":79,"endColumn":82,"suggestions":"300"},{"ruleId":"281","severity":1,"message":"301","line":18,"column":9,"nodeType":"272","messageId":"283","endLine":18,"endColumn":13},{"ruleId":"281","severity":1,"message":"296","line":18,"column":10,"nodeType":"272","messageId":"283","endLine":18,"endColumn":11},{"ruleId":"281","severity":1,"message":"302","line":18,"column":13,"nodeType":"272","messageId":"283","endLine":18,"endColumn":24},"no-native-reassign",["303"],"no-negated-in-lhs",["304"],"react-hooks/exhaustive-deps","The 'constraints' object makes the dependencies of useCallback Hook (at line 39) change on every render. To fix this, wrap the initialization of 'constraints' in its own useMemo() Hook.","VariableDeclarator","React Hook React.useCallback has a missing dependency: 'constraints'. Either include it or remove the dependency array.","ArrayExpression",["305"],"React Hook React.useCallback has an unnecessary dependency: 'contentRef'. Either exclude it or remove the dependency array.",["306"],["307"],"React Hook React.useCallback has a missing dependency: 'duration'. Either include it or remove the dependency array.",["308"],"React Hook React.useCallback has a missing dependency: 'setContents'. Either include it or remove the dependency array.",["309"],"React Hook React.useEffect has a missing dependency: 'getRoomListFromSocket'. Either include it or remove the dependency array.",["310"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","The ref value 'contentRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'contentRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier",["311"],["312"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["303"],["304"],"@typescript-eslint/no-unused-vars","'Dimd' is assigned a value but never used.","unusedVar","'inputChangeHandler' is assigned a value but never used.","'buttonClickHandler' is assigned a value but never used.",["303"],["304"],"React Hook React.useEffect has a missing dependency: 'animationDuration'. Either include it or remove the dependency array.",["313"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ChangeEvent' is defined but never used.","React Hook React.useCallback has an unnecessary dependency: 'value'. Either exclude it or remove the dependency array.",["314"],"'styled' is defined but never used.","'_' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'name'. Either include it or remove the dependency array.",["315"],"React Hook React.useEffect has a duplicate dependency: 'required'. Either omit it or remove the dependency array.",["316"],"'user' is assigned a value but never used.","'forceUpdate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"321","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [constraints]",{"range":"340","text":"341"},"Update the dependencies array to be: [setHTML, setNode, children]",{"range":"342","text":"343"},"Update the dependencies array to be: [lastHeightRef, timeout]",{"range":"344","text":"345"},"Update the dependencies array to be: [duration, setContents]",{"range":"346","text":"347"},"Update the dependencies array to be: [setContents, onLoadContentHandler, duration]",{"range":"348","text":"349"},"Update the dependencies array to be: [setRoomList, setLoading, getRoomListFromSocket]",{"range":"350","text":"351"},{"range":"352","text":"345"},"Update the dependencies array to be: [duration]",{"range":"353","text":"354"},"Update the dependencies array to be: [_open, setIsOpen, setIsActive, onClose, animationDuration]",{"range":"355","text":"356"},"Update the dependencies array to be: [rules, required, setErrorMessage]",{"range":"357","text":"358"},"Update the dependencies array to be: [name, setFormData]",{"range":"359","text":"360"},"Update the dependencies array to be: [name, defaultValue, required, valueChangeHandler, deleteFormData]",{"range":"361","text":"362"},[1393,1403],"[constraints]",[2998,3038],"[setHTML, setNode, children]",[3418,3454],"[lastHeightRef, timeout]",[3746,3802],"[duration, setContents]",[4396,4490],"[setContents, onLoadContentHandler, duration]",[2294,2319],"[setRoomList, setLoading, getRoomListFromSocket]",[2508,2544],[2805,2848],"[duration]",[1242,1282],"[_open, setIsOpen, setIsActive, onClose, animationDuration]",[1284,1325],"[rules, required, setErrorMessage]",[1369,1382],"[name, setFormData]",[1808,1884],"[name, defaultValue, required, valueChangeHandler, deleteFormData]"]